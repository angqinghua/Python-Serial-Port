#!/usr/bin/python
#-*- coding: utf-8 -*-
import sys
import serial
import serial.tools.list_ports
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QWidget, QPushButton, QLineEdit,QTextEdit,
    QInputDialog, QApplication,QGridLayout,QLabel,QComboBox)

class SerialPortTest(QWidget):
    def __init__(self):
        super(SerialPortTest,self).__init__()
        self.initUI()
        self.initSerial()

    def initSerial(self):
        try:
            self.readmessage = ""
            port_list = list(serial.tools.list_ports.comports())
            if len(port_list) == 0:
                print "no serial"
                exit()
            portName = [n for n in range(len(port_list))]
            self.portComboBox.clear()
            self.baudComboBox.clear()
            for i in range(0,len(port_list)):
                portName[i] = list(port_list[i])[0]
                print i+1,":",portName[i]
                self.portComboBox.addItem(portName[i])
            self.baudComboBox.addItems(["9600","115200","230400"])
        except:
            print "open serial got except"
            exit()

    def initUI(self):

        self.portComboBox = QComboBox(self)
        self.baudComboBox = QComboBox(self)
        self.sendComd     = QLineEdit(self)
        self.readText     = QTextEdit(self)

        self.portLabel = QLabel("Port",self)
        self.baudLabel = QLabel("Baudrate",self)
        self.sendBtn   = QPushButton('Send',self)
        self.openBtn   = QPushButton('Open',self)
        self.closeBtn  = QPushButton('Close',self)
        self.scanSerialPort = QPushButton('ScanPorts',self)

        self.sendBtn.clicked.connect(self.sendAndReadSerial)
        self.openBtn.clicked.connect(self.openSerialPort)
        self.closeBtn.clicked.connect(self.closeSeiralPort)
        self.scanSerialPort.clicked.connect(self.initSerial)

        grid = QGridLayout()
        grid.setSpacing(10)

        grid.addWidget(self.portLabel, 1, 0)
        grid.addWidget(self.portComboBox, 1, 1)
        grid.addWidget(self.baudLabel, 1, 2)
        grid.addWidget(self.baudComboBox, 1, 3)
        grid.addWidget(self.scanSerialPort, 1, 6)
        grid.addWidget(self.readText, 2, 0, 5, 5)
        grid.addWidget(self.sendComd, 7, 0,1,5)
        grid.addWidget(self.sendBtn, 7, 6)
        grid.addWidget(self.openBtn, 3, 6)
        grid.addWidget(self.closeBtn, 4, 6)
        self.setLayout(grid)

        self.setGeometry(300, 150, 600, 500)
        self.setWindowTitle('Serial Port Test')
        self.show()

    def sendAndReadSerial(self):
        text = self.sendComd.text()
        self.serialMS.write(str(text+"\r\n"))
        readms = self.serialMS.readall()
        self.readmessage += readms
        self.readText.setText(self.readmessage)

    def openSerialPort(self):
        portName = self.portComboBox.currentText()
        serialBaud = int(self.baudComboBox.currentText())
        self.serialMS = serial.Serial(portName,serialBaud,timeout = 0.1)
        if self.serialMS.isOpen():
            self.readText.setText("Open Seiral Port")

    def closeSeiralPort(self):
        try:
            if self.serialMS.isOpen():
                self.serialMS.close()
                self.readText.setText("Close Seiral Port")
        except:
            self.readText.setText("Seiral Port is close")

    def keyPressEvent(self,event):
        try:
            if event.key() == Qt.Key_Return:
                self.sendAndReadSerial()
        except:
            self.readText.setText("Seiral Port is close")
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = SerialPortTest()
    sys.exit(app.exec_())

